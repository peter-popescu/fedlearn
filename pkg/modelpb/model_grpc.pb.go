// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/model.proto

package modelpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModelService_InitializeModel_FullMethodName       = "/ModelService/InitializeModel"
	ModelService_ModelGetWeights_FullMethodName       = "/ModelService/ModelGetWeights"
	ModelService_AggregateModelWeights_FullMethodName = "/ModelService/AggregateModelWeights"
)

// ModelServiceClient is the client API for ModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelServiceClient interface {
	InitializeModel(ctx context.Context, in *InitializeModelReq, opts ...grpc.CallOption) (*InitializeModelRes, error)
	ModelGetWeights(ctx context.Context, in *ModelGetWeightsReq, opts ...grpc.CallOption) (*ClientWeights, error)
	AggregateModelWeights(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ClientWeights, AggregateModelWeightsRes], error)
}

type modelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelServiceClient(cc grpc.ClientConnInterface) ModelServiceClient {
	return &modelServiceClient{cc}
}

func (c *modelServiceClient) InitializeModel(ctx context.Context, in *InitializeModelReq, opts ...grpc.CallOption) (*InitializeModelRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitializeModelRes)
	err := c.cc.Invoke(ctx, ModelService_InitializeModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) ModelGetWeights(ctx context.Context, in *ModelGetWeightsReq, opts ...grpc.CallOption) (*ClientWeights, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientWeights)
	err := c.cc.Invoke(ctx, ModelService_ModelGetWeights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) AggregateModelWeights(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ClientWeights, AggregateModelWeightsRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModelService_ServiceDesc.Streams[0], ModelService_AggregateModelWeights_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientWeights, AggregateModelWeightsRes]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModelService_AggregateModelWeightsClient = grpc.ClientStreamingClient[ClientWeights, AggregateModelWeightsRes]

// ModelServiceServer is the server API for ModelService service.
// All implementations must embed UnimplementedModelServiceServer
// for forward compatibility.
type ModelServiceServer interface {
	InitializeModel(context.Context, *InitializeModelReq) (*InitializeModelRes, error)
	ModelGetWeights(context.Context, *ModelGetWeightsReq) (*ClientWeights, error)
	AggregateModelWeights(grpc.ClientStreamingServer[ClientWeights, AggregateModelWeightsRes]) error
	mustEmbedUnimplementedModelServiceServer()
}

// UnimplementedModelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModelServiceServer struct{}

func (UnimplementedModelServiceServer) InitializeModel(context.Context, *InitializeModelReq) (*InitializeModelRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeModel not implemented")
}
func (UnimplementedModelServiceServer) ModelGetWeights(context.Context, *ModelGetWeightsReq) (*ClientWeights, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelGetWeights not implemented")
}
func (UnimplementedModelServiceServer) AggregateModelWeights(grpc.ClientStreamingServer[ClientWeights, AggregateModelWeightsRes]) error {
	return status.Errorf(codes.Unimplemented, "method AggregateModelWeights not implemented")
}
func (UnimplementedModelServiceServer) mustEmbedUnimplementedModelServiceServer() {}
func (UnimplementedModelServiceServer) testEmbeddedByValue()                      {}

// UnsafeModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelServiceServer will
// result in compilation errors.
type UnsafeModelServiceServer interface {
	mustEmbedUnimplementedModelServiceServer()
}

func RegisterModelServiceServer(s grpc.ServiceRegistrar, srv ModelServiceServer) {
	// If the following call pancis, it indicates UnimplementedModelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModelService_ServiceDesc, srv)
}

func _ModelService_InitializeModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeModelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).InitializeModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_InitializeModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).InitializeModel(ctx, req.(*InitializeModelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_ModelGetWeights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelGetWeightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).ModelGetWeights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_ModelGetWeights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).ModelGetWeights(ctx, req.(*ModelGetWeightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_AggregateModelWeights_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelServiceServer).AggregateModelWeights(&grpc.GenericServerStream[ClientWeights, AggregateModelWeightsRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModelService_AggregateModelWeightsServer = grpc.ClientStreamingServer[ClientWeights, AggregateModelWeightsRes]

// ModelService_ServiceDesc is the grpc.ServiceDesc for ModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ModelService",
	HandlerType: (*ModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitializeModel",
			Handler:    _ModelService_InitializeModel_Handler,
		},
		{
			MethodName: "ModelGetWeights",
			Handler:    _ModelService_ModelGetWeights_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AggregateModelWeights",
			Handler:       _ModelService_AggregateModelWeights_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/model.proto",
}
