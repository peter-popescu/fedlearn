// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/fedlearn.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FedLearn_SendWeights_FullMethodName    = "/FedLearn/SendWeights"
	FedLearn_RequestWeights_FullMethodName = "/FedLearn/RequestWeights"
)

// FedLearnClient is the client API for FedLearn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FedLearnClient interface {
	SendWeights(ctx context.Context, in *SendWeightsReq, opts ...grpc.CallOption) (*SendWeightsRes, error)
	RequestWeights(ctx context.Context, in *RequestWeightsReq, opts ...grpc.CallOption) (*RequestWeightsRes, error)
}

type fedLearnClient struct {
	cc grpc.ClientConnInterface
}

func NewFedLearnClient(cc grpc.ClientConnInterface) FedLearnClient {
	return &fedLearnClient{cc}
}

func (c *fedLearnClient) SendWeights(ctx context.Context, in *SendWeightsReq, opts ...grpc.CallOption) (*SendWeightsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendWeightsRes)
	err := c.cc.Invoke(ctx, FedLearn_SendWeights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fedLearnClient) RequestWeights(ctx context.Context, in *RequestWeightsReq, opts ...grpc.CallOption) (*RequestWeightsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestWeightsRes)
	err := c.cc.Invoke(ctx, FedLearn_RequestWeights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FedLearnServer is the server API for FedLearn service.
// All implementations must embed UnimplementedFedLearnServer
// for forward compatibility.
type FedLearnServer interface {
	SendWeights(context.Context, *SendWeightsReq) (*SendWeightsRes, error)
	RequestWeights(context.Context, *RequestWeightsReq) (*RequestWeightsRes, error)
	mustEmbedUnimplementedFedLearnServer()
}

// UnimplementedFedLearnServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFedLearnServer struct{}

func (UnimplementedFedLearnServer) SendWeights(context.Context, *SendWeightsReq) (*SendWeightsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWeights not implemented")
}
func (UnimplementedFedLearnServer) RequestWeights(context.Context, *RequestWeightsReq) (*RequestWeightsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestWeights not implemented")
}
func (UnimplementedFedLearnServer) mustEmbedUnimplementedFedLearnServer() {}
func (UnimplementedFedLearnServer) testEmbeddedByValue()                  {}

// UnsafeFedLearnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FedLearnServer will
// result in compilation errors.
type UnsafeFedLearnServer interface {
	mustEmbedUnimplementedFedLearnServer()
}

func RegisterFedLearnServer(s grpc.ServiceRegistrar, srv FedLearnServer) {
	// If the following call pancis, it indicates UnimplementedFedLearnServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FedLearn_ServiceDesc, srv)
}

func _FedLearn_SendWeights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWeightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedLearnServer).SendWeights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FedLearn_SendWeights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedLearnServer).SendWeights(ctx, req.(*SendWeightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FedLearn_RequestWeights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWeightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FedLearnServer).RequestWeights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FedLearn_RequestWeights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FedLearnServer).RequestWeights(ctx, req.(*RequestWeightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FedLearn_ServiceDesc is the grpc.ServiceDesc for FedLearn service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FedLearn_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FedLearn",
	HandlerType: (*FedLearnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendWeights",
			Handler:    _FedLearn_SendWeights_Handler,
		},
		{
			MethodName: "RequestWeights",
			Handler:    _FedLearn_RequestWeights_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fedlearn.proto",
}
